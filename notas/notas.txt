const CACHE_NAME = 'CachePWA_V1',
  urlsToCache = [
    './',
    './index.php',
    './components/headdoc.php',
    './components/footer.php',
    './components/menubar.php',
    './components/navbar.php',
    './AccountSettings.php',
    './cambia_pass.php',
    './Cambia_Sys.php',
    './guarda_pass.php',
    './logout.php',
    './manifest.json',
    './password.php',
    './principal.php',
    './register.php',
    './assets/img/cropped-icon-32x32.png',
    './assets/img/icon_piping_64.png',
    './assets/img/icon_well_96.png',
    './assets/img/Logo_WebTelemetryW.png',
    './assets/img/logo.png.png',
    './assets/img/WebTelemetry_ICON_1024.png',
    './assets/img/WebTelemetry_ICON_512.png',
    './assets/img/WebTelemetry_ICON_384.png',
    './assets/img/WebTelemetry_ICON_256.png',
    './assets/img/WebTelemetry_ICON_192.png',
    './assets/img/WebTelemetry_ICON_128.png',
    './assets/img/WebTelemetry_ICON_96.png',
    './assets/img/WebTelemetry_ICON_64.png',
    './assets/img/WebTelemetry_ICON_32.png',
    './css/bootstrap-theme.min.css',
    './css/bootstrap.min.css',
    './css/daterangepicker.css',
    './css/font-awesome.min.css',
    './css/styles.css',
    './css/sweetalert2.css',
    './funcs/.php',
    './funcs/Bombas.php',
    './funcs/fetchDatos.php',
    './funcs/fetchDatosIV.php',
    './funcs/fetchDatosJ.php',
    './funcs/fetchDatosJ2.php',
    './funcs/fetchDatosLH.php',
    './funcs/fetchDatosLHIV.php',
    './funcs/fetchDatosLHJ.php',
    './funcs/fetchDatosLHJ2.php',
    './funcs/fetchSystem.php',
    './funcs/funcs.php',
    './funcs/idSensores.php',
    './js/jmespath/jmespath.js',
    './js/all.min.js',
    './js/api.js',
    './js/apps.js',
    './js/bootstrap.bundle.min.js',
    './js/bootstrap.min.js',
    './js/chart.js',
    './js/chartjs-plugin-zoom.min.js',
    './js/datepicker.js',
    './js/daterangepicker.min.js',
    './js/hammer.min.js',
    './js/jquery-3.6.0.min.js',
    './js/jquery-3.4.1.min.js',
    './js/moment-with-locales.min.js',
    './js/moment.min.js',
    './js/mqtt.min.js',
    './js/scripts.js',
    './sw.js',
    './js/sweetalert2.js',
    'https://htech.mx/'
  ]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////       
genera una linea en el grafico
puede usarse para indicar el maximo o el minimo en la grafica

        const statusTracker = {
          id: 'statusTracker',
          beforeDatasetsDraw(chart, args, pluginOptions){
            const {ctx, chartArea:{top, bottom,left,right,width,height}, 
            scales:{x,y}} = chart;

            ctx.save();
            drawLines(Pmax,'rgba(255, 26, 104, 1)');
            function drawLines(yValue,color){
              ctx.beginPath();
              ctx.lineWidth = 3;
              ctx.strokeStyle = color;
              ctx.moveTo(left,y.getLabelForValue(yValue));
              ctx.lineTo(right,y.getLabelForValue(yValue));
              ctx.stroke();
              ctx.closePath();
              ctx.restore();
            }
          }
        }

                const config = {
          type: 'line',
          data,
          options: {
            plugins: {
            zoom: {
              zoom: {
                wheel: {
                  enabled: true,
                  modifierKey: 'ctrl'
                },
                pinch: {
                  enabled: true
                },
                mode: 'xy',
              },
              pan: {
                  enabled: true,
                  mode: 'xy',
                  modifierKey: 'ctrl'
                }
            }
          },
            scales: {
              x: {
                ticks: {
                  // For a category axis, the val is the index so the lookup via getLabelForValue is needed
                  callback: function(val, index) {
                    // Hide every 2nd tick label
                    if(CC<10){
                      return index % 1 === 0 ? (this.getLabelForValue(val)).slice(11,) : '';

                    }else if(CC<100){

                      return index % 2 === 0 ? (this.getLabelForValue(val)).slice(11,) : '';
                    }else{
                     return index % 3 === 0 ? moment((this.getLabelForValue(val)).slice(0,11), "YYYY-MM-DD").format("MMM Do") : '';
                    }  
                  },
                  color: 'blue',
                }
              },
              y: {
                beginAtZero: false
              }
            }
          },
          plugins: [statusTracker]
        };
//////////////////////////////////////////////////////////////////////////////////////////////////////////////


$(document).ready(function() {
  var id;
  var id_S;
  let myChart;
  let labelS = " hola mundo";
  let template= "";
  let templateBC1,templateBC_base,templateBC="";
  let AUX = 0;
    // Testing Jquery
  console.log('jquery is working!');
  $('#Grafica').hide();
  //$('#BRW').show();
    $(document).on('click', '.Fuentes', function(){
      

      templateBC_base = `
                    <li class="breadcrumb-item"><a href="principal.php">Dashboard</a></li>
                    <li class="breadcrumb-item">Fuentes de Agua</li>          
                    `
    });
    $(document).on('click', '.Redes', function(){
      

      templateBC_base = `
                    <li class="breadcrumb-item"><a href="principal.php">Dashboard</a></li>
                    <li class="breadcrumb-item">Redes de Agua</li>          
                    `
    });
    $(document).on('click', '.FR_G', function(){
        templateBC1 = templateBC_base + `
                    <li class="breadcrumb-item">${$(this).html().slice(0, -542)}</li>          
                    `
    
      
    }); 
  /*Este es el primer bloque que se ejecuta*/
    $(document).on('click', '.FRGrupo', function(){
      id = $(this).attr('id');

      $.post('funcs/idSensores.php', {id}, (response) => {
        //console.log(response)
        const ids = JSON.parse(response);
        console.log(ids);
        labelS = ids[0].tipoSensorTexto;
        template = `
                    <li class="nav-item">
                      <a class="nav-link FRSEN active" id="${ids[0].idSensor}" href="#">${ids[0].tipoSensorTexto}</a>
                    </li>           
                    `;
          
          if (ids.length>=2) {
          for (var i = 1; i < ids.length; i++) {
             template += `
                    <li class="nav-item">
                      <a class="nav-link FRSEN" id="${ids[i].idSensor}" href="#">${ids[i].tipoSensorTexto}</a>
                    </li>           
                    ` 
          }}
          






          templateBC = templateBC1 + `
                
                    <li class="breadcrumb-item active">${$(this).html()}</li>           
                    ` 
            
            
            $('#Sensores').html(template);
            $('#breadC').html(templateBC);
        
        id_S = ids[0].idSensor;
        console.log(id_S);
        DatosLH(id_S);
        // console.log(TC);
      });

      $.post('funcs/fetchDatosLHIV.php', {id}, (response) => {
        //console.log(response)
        if (response != "[]") {
        
        const ids = JSON.parse(response);
        console.log(ids);
             template += `
                    <li class="nav-item">
                      <a class="nav-link VL" id="${ids[0].idGrupo}" href="#">Voltage</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link CT" id="${ids[0].idGrupo}" href="#">Current</a>
                    </li>           
                    `

            
            //$('#conteiner').show();
            $('#Sensores').html(template);

    
        }
        // console.log(TC);
      });

    });
    /*Fin del primer bloque que se ejecuta*/

    $('.nav-tabs').on('click', 'a', function(){
        $('.nav-tabs a.active').removeClass('active');
        $(this).addClass('active');
       
        document.getElementById("spanDate").style.display = "none";
        $("#inlineRadio2").prop('checked', false);
        $("#inlineRadio1").prop('checked', true);



    });

    $(document).on('click', '.FRSEN', function(){
      AUX = 0;
      id_S = $(this).attr('id');
      labelS = $(this).text();
      console.log(labelS);
      DatosLH(id_S);
       
    });

    $(document).on('click', '.VL', function(){
      AUX = 1;
      id_S = $(this).attr('id');
      labelS = $(this).text();
      console.log(labelS);
      DatosLHIV(id_S,0);
       
    });

    $(document).on('click', '.CT', function(){
      AUX = 1;
      id_S = $(this).attr('id');
      labelS = $(this).text();
      console.log(labelS);
      DatosLHIV(id_S,1);
       
    });


    $('input[name=inlineRadioOptions]').on('change', function() {
        if ($(this).val() == "option1") {
            
            document.getElementById("spanDate").style.display = "none";
            console.log("Last Hour");
            if (AUX==1) {
              DatosLHIV(id_S);
            } else {
              DatosLH(id_S);
            }
            
        } else {
            console.log("Custom");
            
            DatePK();
            document.getElementById("spanDate").style.display = "block";
        }
        
    });
   
    



    function fetchData(id_S,fi,ff){
        console.log("fetchData");
        $.post('funcs/fetchDatos.php', {id_S,fi,ff}, (response) => {
        ExtD(response);
      });
    }

    function DatosLH(id_S){
      console.log("DatosLH");
        $.post('funcs/fetchDatosLH.php', {id_S}, (response) => {
          ExtD(response);
        });
    
    }

    function fetchDataIV(id,fi,ff,TP){
        console.log("fetchDataIV");
        $.post('funcs/fetchDatosIV.php', {id,fi,ff}, (response) => {
        ExtDIV(response,TP);
      });
    }

    function DatosLHIV(id,TP){
      console.log("DatosLHIV");
        $.post('funcs/fetchDatosLHIV.php', {id}, (response) => {
          ExtDIV(response,TP);
        });
    
    }
    function ExtD(datos){
        console.log(datos)
         var fecha = jmespath.search(JSON.parse(datos), "[::-1] | [*].fecha");
         var datosS = jmespath.search(JSON.parse(datos), "[::-1] | [*].dato");

        // console.log(fecha)
        // console.log(datosS)
        ChartData(fecha,datosS);
        $('#BRW').hide();
        $('#Grafica').show();
    }
    function ExtDIV(datos,TP){
        console.log(datos)
         var fecha = jmespath.search(JSON.parse(datos), "[::-1] | [*].fecha");
         
         
         if (TP==0) {
          var VL1 = jmespath.search(JSON.parse(datos), "[::-1] | [*].voltaje1");
          var VL2 = jmespath.search(JSON.parse(datos), "[::-1] | [*].voltaje2");
          var VL3 = jmespath.search(JSON.parse(datos), "[::-1] | [*].voltaje3");
          const labelIV =["voltage1","voltage2","voltage3"];
          ChartData3(fecha,VL1,VL2,VL3,labelIV);
         } else {
          var CT1 = jmespath.search(JSON.parse(datos), "[::-1] | [*].corriente1");
          var CT2 = jmespath.search(JSON.parse(datos), "[::-1] | [*].corriente2");
          var CT3 = jmespath.search(JSON.parse(datos), "[::-1] | [*].corriente3");
          const labelIV =["Current1","Current2","Current3"];
          ChartData3(fecha,CT1,CT2,CT3,labelIV);
         }

    }

     function ChartData3(datesresult,points,points2,points3,labelIV){
        const dates = datesresult;
        const datapoints = points;
        const datapoints2 = points2;
        const datapoints3 = points3;

        const data = {
          labels: dates,
          datasets: [{
            label: labelIV[0],
            data: datapoints,
            backgroundColor:'rgba(54, 162, 235, 0.2)',
            borderColor:'rgba(54, 162, 235, 1)',
            borderWidth: 1
          },
          {
            label: labelIV[1],
            data: datapoints2,
            backgroundColor:'rgba(75, 192, 192, 0.2)',
            borderColor:'rgba(75, 192, 192, 1)',
            borderWidth: 1
          },
          {
            label: labelIV[2],
            data: datapoints3,
            backgroundColor:'rgba(153, 102, 255, 0.2)',
            borderColor:'rgba(153, 102, 255, 1)',
            borderWidth: 1
          }
          ]
        };

        // config 
        const config = {
          type: 'line',
          data,
          options: {
            plugins: {
            zoom: {
              zoom: {
                wheel: {
                  enabled: true,
                  modifierKey: 'ctrl'
                },
                pinch: {
                  enabled: true
                },
                mode: 'xy',
              },
              pan: {
                  enabled: true,
                  mode: 'xy',
                  modifierKey: 'ctrl'
                }
            }
          },
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        };

        if (myChart) {
        myChart.destroy();
        }
        // render init block
        myChart = new Chart(
          document.getElementById('myChart'),
          config
        );
    }

    function ChartData(datesresult,points){
        const dates = datesresult;
        const datapoints = points;

        const data = {
          labels: dates,
          datasets: [{
            label: labelS,
            data: datapoints,
            backgroundColor:'rgba(54, 162, 235, 0.2)',
            borderColor:'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }
          ]
        };

        // config 
        const config = {
          type: 'line',
          data,
          options: {
            plugins: {
            zoom: {
              zoom: {
                wheel: {
                  enabled: true,
                  modifierKey: 'ctrl'
                },
                pinch: {
                  enabled: true
                },
                mode: 'xy',
              },
              pan: {
                  enabled: true,
                  mode: 'xy',
                  modifierKey: 'ctrl'
                }
            }
          },
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        };

        if (myChart) {
        myChart.destroy();
        }
        // render init block
        myChart = new Chart(
          document.getElementById('myChart'),
          config
        );
    }

    function DatePK(){
      $('#daterange').daterangepicker({
        "showDropdowns": true,
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        },
        "locale": {
            "format": "DD/MM/YYYY",
            "separator": " - ",
            "applyLabel": "Apply",
            "cancelLabel": "Cancel",
            "fromLabel": "From",
            "toLabel": "To",
            "customRangeLabel": "Custom",
            "weekLabel": "W",
            "daysOfWeek": [
                "D",
                "L",
                "M",
                "M",
                "J",
                "V",
                "S"
            ],
            "monthNames": [
                "Enero",
                "Febrero",
                "Marzo",
                "Abril",
                "Mayo",
                "Junio",
                "Julio",
                "Agosto",
                "Septiembre",
                "Octubre",
                "Noviembre",
                "Diciembre"
            ],
            "firstDay": 1
        },
        "parentEl": "DashHTECH",
        "startDate": moment().subtract(1, 'days'),
        "endDate": moment().subtract(1, 'days'),
        "minDate": "12/12/1990",
        "maxDate": "12/12/2222",
        "cancelClass": "btn-danger",
        "opens": "left",
        "drops": "up"
    }, function(start, end, label) {
      console.log('New date range selected: ' + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD') + ' (predefined range: ' + label + ')');

        const startdate = start.format('YYYYMMDD')+"000000";//document.getElementById('startdata');
        const enddate = end.format('YYYYMMDD')+"235959";//document.getElementById('enddata');
        //console.log(startdate, enddate);
        if (AUX==1) {
          fetchDataIV(id_S,startdate,enddate);
        } else {
          fetchData(id_S,startdate,enddate);
        }
        
        


    });
    //console.log(dateSE);  
    }     
                      

});




$(document).ready(function() {
  var id;
  var id_S;
  let myChart;

  
    // Testing Jquery
  console.log('jquery is working!');
  $('#Grafica').hide();
  //$('#BRW').show();

  /*Este es el primer bloque que se ejecuta*/
    $(document).on('click', '.FRGrupo', function(){
      id = $(this).attr('id');

      $.post('funcs/idSensores.php', {id}, (response) => {
        //console.log(response)
        const ids = JSON.parse(response);
        
        let template = `
                    <li class="nav-item" id="${ids[0].idSensor}">
                      <a class="nav-link active" href="#">${ids[0].tipoSensorTexto}</a>
                    </li>           
                    `;
          
          if (ids.length>=2) {
          for (var i = 1; i < ids.length; i++) {
             template += `
                    <li class="nav-item">
                      <a class="nav-link FRSEN" id="${ids[i].idSensor}" href="#">${ids[i].tipoSensorTexto}</a>
                    </li>           
                    ` 
          }}

            
            //$('#conteiner').show();
            $('#Sensores').html(template);
        id_S = ids[0].idSensor;
        console.log(id_S);
        DatosLH(id_S);
        // console.log(TC);
      });
    });
    /*Fin del primer bloque que se ejecuta*/

    $('.nav-tabs').on('click', 'a', function(){
        $('.nav-tabs a.active').removeClass('active');
        $(this).addClass('active');
    });

    $(document).on('click', '.FRSEN', function(){
      id_S = $(this).attr('id');
      console.log(id_S);
      DatosLH(id_S);
    });

    $('input[name=inlineRadioOptions]').on('change', function() {
        if ($(this).val() == "option1") {
            document.getElementById("spanDate").style.display = "none";
            console.log("Last Hour");
            DatosLH(id_S);
        } else {
            console.log("Custom");
            DatePK();
            document.getElementById("spanDate").style.display = "block";
        }
        
    });
   
    



    function fetchData(id_S,fi,ff){
        console.log("fetchData");
        $.post('funcs/fetchDatos.php', {id_S,fi,ff}, (response) => {
        ExtD(response);
      });
    }

    function DatosLH(id_S){
      console.log("DatosLH");
        $.post('funcs/fetchDatosLH.php', {id_S}, (response) => {
          ExtD(response);
        });
    
    }
    function ExtD(datos){
        console.log(datos)
         var fecha = jmespath.search(JSON.parse(datos), "[::-1] | [*].fecha");
         var datosS = jmespath.search(JSON.parse(datos), "[::-1] | [*].dato");

        // console.log(fecha)
        // console.log(datosS)
        ChartData(fecha,datosS);
        $('#BRW').hide();
        $('#Grafica').show();
    }


    function ChartData(datesresult,points){
        const dates = datesresult;
        const datapoints = points;

        const data = {
          labels: dates,
          datasets: [{
            label: 'Dato',
            data: datapoints,
            backgroundColor:'rgba(54, 162, 235, 0.2)',
            borderColor:'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }
          ]
        };

        // config 
        const config = {
          type: 'line',
          data,
          options: {
            plugins: {
            zoom: {
              zoom: {
                wheel: {
                  enabled: true,
                  modifierKey: 'ctrl'
                },
                pinch: {
                  enabled: true
                },
                mode: 'xy',
              },
              pan: {
                  enabled: true,
                  mode: 'xy',
                  modifierKey: 'ctrl'
                }
            }
          },
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        };

        if (myChart) {
        myChart.destroy();
        }
        // render init block
        myChart = new Chart(
          document.getElementById('myChart'),
          config
        );
    }

    function DatePK(){
      $('#daterange').daterangepicker({
        "showDropdowns": true,
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        },
        "locale": {
            "format": "DD/MM/YYYY",
            "separator": " - ",
            "applyLabel": "Apply",
            "cancelLabel": "Cancel",
            "fromLabel": "From",
            "toLabel": "To",
            "customRangeLabel": "Custom",
            "weekLabel": "W",
            "daysOfWeek": [
                "D",
                "L",
                "M",
                "M",
                "J",
                "V",
                "S"
            ],
            "monthNames": [
                "Enero",
                "Febrero",
                "Marzo",
                "Abril",
                "Mayo",
                "Junio",
                "Julio",
                "Agosto",
                "Septiembre",
                "Octubre",
                "Noviembre",
                "Diciembre"
            ],
            "firstDay": 1
        },
        "parentEl": "DashHTECH",
        "startDate": moment().subtract(1, 'days'),
        "endDate": moment().subtract(1, 'days'),
        "minDate": "12/12/1990",
        "maxDate": "12/12/2222",
        "cancelClass": "btn-danger",
        "opens": "left",
        "drops": "up"
    }, function(start, end, label) {
      console.log('New date range selected: ' + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD') + ' (predefined range: ' + label + ')');

        const startdate = start.format('YYYYMMDD')+"000000";//document.getElementById('startdata');
        const enddate = end.format('YYYYMMDD')+"235959";//document.getElementById('enddata');
        //console.log(startdate, enddate);
        fetchData(id_S,startdate,enddate);
        


    });
    //console.log(dateSE);  
    }     
                      

});

$(document).ready(function() {
  var id;
  var id_S;
    // Testing Jquery
  console.log('jquery is working!');
  $('#Grafica').hide();
  //$('#BRW').show();

  /*Este es el primer bloque que se ejecuta*/
    $(document).on('click', '.FRGrupo', function(){
      id = $(this).attr('id');
      
      $.post('funcs/idSensores.php', {id}, (response) => {
        //console.log(response)
        const ids = JSON.parse(response);
        id_S = ids[0].idSensor;
        DatosLH(id_S);
      });
    });
    /*Fin del primer bloque que se ejecuta*/


    $('input[name=inlineRadioOptions]').on('change', function() {
        if ($(this).val() == "option1") {
            console.log("Last Hour");
            DatosLH(id_S);
        } else {
            console.log("Custom");
            let F_aux =DatePK();
            fetchData(id_S,F_aux.startdate,F_aux.enddate);
        }
        
    });
   

    function fetchData(id_S,fi,ff){
        $.post('funcs/fetchDatos.php', {id_S,fi,ff}, (response) => {
        ExtD(response);
      });
    }

    function DatosLH(id_S){
        $.post('funcs/fetchDatosLH.php', {id_S}, (response) => {
          ExtD(response);
        });
    
    }
    function ExtD(datos){
        console.log(datos)
         var fecha = jmespath.search(JSON.parse(datos), "[::-1] | [*].fecha");
         var datosS = jmespath.search(JSON.parse(datos), "[::-1] | [*].dato");

        // console.log(fecha)
        // console.log(datosS)
        ChartData(fecha,datosS);
        $('#BRW').hide();
        $('#Grafica').show();
    }

    function ChartData(datesresult,points){
        const dates = datesresult;
        const datapoints = points;

        const data = {
          labels: dates,
          datasets: [{
            label: 'Dato',
            data: datapoints,
            backgroundColor:'rgba(255, 26, 104, 0.2)',
            borderColor:'rgba(255, 26, 104, 1)',
            borderWidth: 1
          }
          ]
        };

        // config 
        const config = {
          type: 'line',
          data,
          options: {
            plugins: {
            zoom: {
              zoom: {
                wheel: {
                  enabled: true,
                  modifierKey: 'ctrl'
                },
                pinch: {
                  enabled: true
                },
                mode: 'xy',
              },
              pan: {
                  enabled: true,
                  mode: 'xy',
                  modifierKey: 'ctrl'
                }
            }
          },
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        };

        // render init block
        const myChart = new Chart(
          document.getElementById('myChart'),
          config
        );
    }

    function DatePK(){
      $('#daterange').daterangepicker({
        "showDropdowns": true,
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        },
        "locale": {
            "format": "DD/MM/YYYY",
            "separator": " - ",
            "applyLabel": "Apply",
            "cancelLabel": "Cancel",
            "fromLabel": "From",
            "toLabel": "To",
            "customRangeLabel": "Custom",
            "weekLabel": "W",
            "daysOfWeek": [
                "D",
                "L",
                "M",
                "M",
                "J",
                "V",
                "S"
            ],
            "monthNames": [
                "Enero",
                "Febrero",
                "Marzo",
                "Abril",
                "Mayo",
                "Junio",
                "Julio",
                "Agosto",
                "Septiembre",
                "Octubre",
                "Noviembre",
                "Diciembre"
            ],
            "firstDay": 1
        },
        "parentEl": "DashHTECH",
        "startDate": moment().subtract(1, 'days'),
        "endDate": moment().subtract(1, 'days'),
        "minDate": "12/12/1990",
        "maxDate": "12/12/2222",
        "cancelClass": "btn-danger",
        "opens": "left",
        "drops": "up"
    }, function(start, end, label) {
      console.log('New date range selected: ' + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD') + ' (predefined range: ' + label + ')');

        const startdate = start.format('YYYYMMDD')+"000000";//document.getElementById('startdata');
        const enddate = end.format('YYYYMMDD')+"235959";//document.getElementById('enddata');

        const dateSE={
            startdate = start.format('YYYYMMDD')+"000000";
            enddate = end.format('YYYYMMDD')+"235959";
        }

        return dateSE;
        
    });  
    }     
                        

});






mensaje de confimación, util para futuras funciones

swal({
  title: 'Are you sure?',
  text: "You won't be able to revert this!",
  type: 'warning',
  showCancelButton: true,
  confirmButtonColor: '#3085d6',
  cancelButtonColor: '#d33',
  confirmButtonText: 'Yes, delete it!'
}).then(function () {
  swal(
    'Deleted!',
    'Your file has been deleted.',
    'success'
  )
})


<a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseLayouts" aria-expanded="false" aria-controls="collapseLayouts"
        ><div class="sb-nav-link-icon"><i class="fas fa-cloud-rain"></i></div>
          Fuentes de Agua
          <div class="sb-sidenav-collapse-arrow"><i class="fas fa-angle-down"></i></div
          ></a>
          <div class="collapse" id="collapseLayouts" aria-labelledby="headingOne" data-parent="#sidenavAccordion">
            <nav class="sb-sidenav-menu-nested nav">
              <a class="nav-link" href="layout-static.html">Static Navigation</a><a class="nav-link" href="layout-sidenav-light.html">Light Sidenav</a>
              <a class="nav-link" href="layout-static.html">Static Navigation</a>
              <a class="nav-link" href="layout-sidenav-light.html">Light Sidenav</a>
              <a class="nav-link" href="layout-static.html">Static Navigation</a><a class="nav-link" href="layout-sidenav-light.html">Light Sidenav</a>
              <a class="nav-link" href="layout-static.html">Static Navigation</a>
              <a class="nav-link" href="layout-sidenav-light.html">Light Sidenav</a>

            </nav>
          </div>

modificar para cada dropdown

data-target
aria-controls
id del div donde se tienen los links